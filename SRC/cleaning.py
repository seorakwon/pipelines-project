{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import datetime\n",
    "import re\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>Location</th>\n",
       "      <th>Operator</th>\n",
       "      <th>Flight #</th>\n",
       "      <th>Route</th>\n",
       "      <th>AC Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>cn/ln</th>\n",
       "      <th>Aboard</th>\n",
       "      <th>Aboard Passangers</th>\n",
       "      <th>Aboard Crew</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>Fatalities Passangers</th>\n",
       "      <th>Fatalities Crew</th>\n",
       "      <th>Ground</th>\n",
       "      <th>Summary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>09/17/1908</td>\n",
       "      <td>17:18</td>\n",
       "      <td>Fort Myer, Virginia</td>\n",
       "      <td>Military - U.S. Army</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Demonstration</td>\n",
       "      <td>Wright Flyer III</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>During a demonstration flight, a U.S. Army fly...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>09/07/1909</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Juvisy-sur-Orge, France</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Air show</td>\n",
       "      <td>Wright Byplane</td>\n",
       "      <td>SC1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Eugene Lefebvre was the first pilot to ever be...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>07/12/1912</td>\n",
       "      <td>06:30</td>\n",
       "      <td>Atlantic City, New Jersey</td>\n",
       "      <td>Military - U.S. Navy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Test flight</td>\n",
       "      <td>Dirigible</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>First U.S. dirigible Akron exploded just offsh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>08/06/1913</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Victoria, British Columbia, Canada</td>\n",
       "      <td>Private</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Curtiss seaplane</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>The first fatal airplane accident in Canada oc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>09/09/1913</td>\n",
       "      <td>18:30</td>\n",
       "      <td>Over the North Sea</td>\n",
       "      <td>Military - German Navy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Zeppelin L-1 (airship)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>The airship flew into a thunderstorm and encou...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date   Time                            Location  \\\n",
       "0  09/17/1908  17:18                 Fort Myer, Virginia   \n",
       "1  09/07/1909    NaN             Juvisy-sur-Orge, France   \n",
       "2  07/12/1912  06:30           Atlantic City, New Jersey   \n",
       "3  08/06/1913    NaN  Victoria, British Columbia, Canada   \n",
       "4  09/09/1913  18:30                  Over the North Sea   \n",
       "\n",
       "                 Operator Flight #          Route                 AC Type  \\\n",
       "0    Military - U.S. Army      NaN  Demonstration        Wright Flyer III   \n",
       "1                     NaN      NaN       Air show          Wright Byplane   \n",
       "2    Military - U.S. Navy      NaN    Test flight               Dirigible   \n",
       "3                 Private      NaN            NaN        Curtiss seaplane   \n",
       "4  Military - German Navy      NaN            NaN  Zeppelin L-1 (airship)   \n",
       "\n",
       "  Registration cn/ln  Aboard  Aboard Passangers  Aboard Crew  Fatalities  \\\n",
       "0          NaN     1     2.0                1.0          1.0         1.0   \n",
       "1          SC1   NaN     1.0                0.0          1.0         1.0   \n",
       "2          NaN   NaN     5.0                0.0          5.0         5.0   \n",
       "3          NaN   NaN     1.0                0.0          1.0         1.0   \n",
       "4          NaN   NaN    20.0                NaN          NaN        14.0   \n",
       "\n",
       "   Fatalities Passangers  Fatalities Crew  Ground  \\\n",
       "0                    1.0              0.0     0.0   \n",
       "1                    0.0              0.0     0.0   \n",
       "2                    0.0              5.0     0.0   \n",
       "3                    0.0              1.0     0.0   \n",
       "4                    NaN              NaN     0.0   \n",
       "\n",
       "                                             Summary  \n",
       "0  During a demonstration flight, a U.S. Army fly...  \n",
       "1  Eugene Lefebvre was the first pilot to ever be...  \n",
       "2  First U.S. dirigible Akron exploded just offsh...  \n",
       "3  The first fatal airplane accident in Canada oc...  \n",
       "4  The airship flew into a thunderstorm and encou...  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('../input/Airplane_Crashes_and_Fatalities_Since_1908_20190820105639.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4967, 17)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Date', 'Time', 'Location', 'Operator', 'Flight #', 'Route', 'AC Type',\n",
      "       'Registration', 'cn/ln', 'Aboard', 'Aboard Passangers', 'Aboard Crew',\n",
      "       'Fatalities', 'Fatalities Passangers', 'Fatalities Crew', 'Ground',\n",
      "       'Summary'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Operator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>09/17/1908</td>\n",
       "      <td>Military - U.S. Army</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>09/07/1909</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>07/12/1912</td>\n",
       "      <td>Military - U.S. Navy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>08/06/1913</td>\n",
       "      <td>Private</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>09/09/1913</td>\n",
       "      <td>Military - German Navy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date                Operator\n",
       "0  09/17/1908    Military - U.S. Army\n",
       "1  09/07/1909                     NaN\n",
       "2  07/12/1912    Military - U.S. Navy\n",
       "3  08/06/1913                 Private\n",
       "4  09/09/1913  Military - German Navy"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Selecting columns that are relevant to  \"\"\n",
    "\n",
    "data1 = data[[\"Date\",\"Operator\"]]\n",
    "\n",
    "\n",
    "data1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date         0\n",
       "Operator    10\n",
       "dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for null columns \n",
    "\n",
    "null_cols = data1.isnull().sum()\n",
    "null_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4967 entries, 0 to 4966\n",
      "Data columns (total 2 columns):\n",
      "Date        4967 non-null object\n",
      "Operator    4957 non-null object\n",
      "dtypes: object(2)\n",
      "memory usage: 77.7+ KB\n"
     ]
    }
   ],
   "source": [
    "data1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Operator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>09/17/1908</td>\n",
       "      <td>Military - U.S. Army</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>09/07/1909</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>07/12/1912</td>\n",
       "      <td>Military - U.S. Navy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>08/06/1913</td>\n",
       "      <td>Private</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>09/09/1913</td>\n",
       "      <td>Military - German Navy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4962</th>\n",
       "      <td>04/16/2019</td>\n",
       "      <td>Archipelagos Service Aereos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4963</th>\n",
       "      <td>05/05/2019</td>\n",
       "      <td>TVPX Aircraft Solutions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4964</th>\n",
       "      <td>05/05/2019</td>\n",
       "      <td>Aeroflot Russian International Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4965</th>\n",
       "      <td>06/03/2019</td>\n",
       "      <td>Military - Indian Air Force</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4966</th>\n",
       "      <td>07/30/2019</td>\n",
       "      <td>Military - Pakistan Army</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4967 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date                                 Operator\n",
       "0     09/17/1908                     Military - U.S. Army\n",
       "1     09/07/1909                                      NaN\n",
       "2     07/12/1912                     Military - U.S. Navy\n",
       "3     08/06/1913                                  Private\n",
       "4     09/09/1913                   Military - German Navy\n",
       "...          ...                                      ...\n",
       "4962  04/16/2019              Archipelagos Service Aereos\n",
       "4963  05/05/2019                  TVPX Aircraft Solutions\n",
       "4964  05/05/2019  Aeroflot Russian International Airlines\n",
       "4965  06/03/2019              Military - Indian Air Force\n",
       "4966  07/30/2019                 Military - Pakistan Army\n",
       "\n",
       "[4967 rows x 2 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data1.dropna()\n",
    "data1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "crashes_year = data1.loc[:, [\"Year\",\"Date\"]].groupby(['Year']).count()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Operator</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2435</th>\n",
       "      <td>1970-01-05</td>\n",
       "      <td>Spantax</td>\n",
       "      <td>1970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2436</th>\n",
       "      <td>1970-01-12</td>\n",
       "      <td>Military - Royal Hellenic Air Force</td>\n",
       "      <td>1970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2437</th>\n",
       "      <td>1970-01-13</td>\n",
       "      <td>Polynesian Airlines</td>\n",
       "      <td>1970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2438</th>\n",
       "      <td>1970-01-14</td>\n",
       "      <td>Faucett</td>\n",
       "      <td>1970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2439</th>\n",
       "      <td>1970-01-25</td>\n",
       "      <td>Royal Nepal Airlines</td>\n",
       "      <td>1970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4962</th>\n",
       "      <td>2019-04-16</td>\n",
       "      <td>Archipelagos Service Aereos</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4963</th>\n",
       "      <td>2019-05-05</td>\n",
       "      <td>TVPX Aircraft Solutions</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4964</th>\n",
       "      <td>2019-05-05</td>\n",
       "      <td>Aeroflot Russian International Airlines</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4965</th>\n",
       "      <td>2019-06-03</td>\n",
       "      <td>Military - Indian Air Force</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4966</th>\n",
       "      <td>2019-07-30</td>\n",
       "      <td>Military - Pakistan Army</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2532 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date                                 Operator  Year\n",
       "2435 1970-01-05                                  Spantax  1970\n",
       "2436 1970-01-12      Military - Royal Hellenic Air Force  1970\n",
       "2437 1970-01-13                      Polynesian Airlines  1970\n",
       "2438 1970-01-14                                  Faucett  1970\n",
       "2439 1970-01-25                     Royal Nepal Airlines  1970\n",
       "...         ...                                      ...   ...\n",
       "4962 2019-04-16              Archipelagos Service Aereos  2019\n",
       "4963 2019-05-05                  TVPX Aircraft Solutions  2019\n",
       "4964 2019-05-05  Aeroflot Russian International Airlines  2019\n",
       "4965 2019-06-03              Military - Indian Air Force  2019\n",
       "4966 2019-07-30                 Military - Pakistan Army  2019\n",
       "\n",
       "[2532 rows x 3 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data1['Date'] = pd.to_datetime(data1['Date'])\n",
    "data1['Year'] = data1['Date'].dt.year\n",
    "#data3\n",
    "# Only take into account the crashes occured in the last 50 years\n",
    "data1 = data1[data1['Year'] > 1969]\n",
    "data1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Year</th>\n",
       "      <th>Operator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2435</td>\n",
       "      <td>1970</td>\n",
       "      <td>Spantax</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2436</td>\n",
       "      <td>1970</td>\n",
       "      <td>Military - Royal Hellenic Air Force</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2437</td>\n",
       "      <td>1970</td>\n",
       "      <td>Polynesian Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2438</td>\n",
       "      <td>1970</td>\n",
       "      <td>Faucett</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2439</td>\n",
       "      <td>1970</td>\n",
       "      <td>Royal Nepal Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2527</th>\n",
       "      <td>4962</td>\n",
       "      <td>2019</td>\n",
       "      <td>Archipelagos Service Aereos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2528</th>\n",
       "      <td>4963</td>\n",
       "      <td>2019</td>\n",
       "      <td>TVPX Aircraft Solutions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2529</th>\n",
       "      <td>4964</td>\n",
       "      <td>2019</td>\n",
       "      <td>Aeroflot Russian International Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2530</th>\n",
       "      <td>4965</td>\n",
       "      <td>2019</td>\n",
       "      <td>Military - Indian Air Force</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2531</th>\n",
       "      <td>4966</td>\n",
       "      <td>2019</td>\n",
       "      <td>Military - Pakistan Army</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2532 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      index  Year                                 Operator\n",
       "0      2435  1970                                  Spantax\n",
       "1      2436  1970      Military - Royal Hellenic Air Force\n",
       "2      2437  1970                      Polynesian Airlines\n",
       "3      2438  1970                                  Faucett\n",
       "4      2439  1970                     Royal Nepal Airlines\n",
       "...     ...   ...                                      ...\n",
       "2527   4962  2019              Archipelagos Service Aereos\n",
       "2528   4963  2019                  TVPX Aircraft Solutions\n",
       "2529   4964  2019  Aeroflot Russian International Airlines\n",
       "2530   4965  2019              Military - Indian Air Force\n",
       "2531   4966  2019                 Military - Pakistan Army\n",
       "\n",
       "[2532 rows x 3 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "data2 = data1[[\"Year\",\"Operator\"]].reset_index()\n",
    "\n",
    "\n",
    "data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "no numeric data to plot",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-45-ac2907340b1f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdata3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mplot1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcrashes_year\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplot1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Year\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplot1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Number of Crashes\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    792\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabel_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    793\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 794\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mplot_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    795\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    796\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/__init__.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(data, kind, **kwargs)\u001b[0m\n\u001b[1;32m     60\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ax\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"left_ax\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0mplot_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPLOT_CLASSES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 62\u001b[0;31m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     63\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    277\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_args_adjust\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 279\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compute_plot_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    280\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setup_subplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36m_compute_plot_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    412\u001b[0m         \u001b[0;31m# no non-numeric frames or series allowed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_empty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no numeric data to plot\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0;31m# GH25587: cast ExtensionArray of pandas (IntegerArray, etc.) to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: no numeric data to plot"
     ]
    }
   ],
   "source": [
    "\n",
    "data3 = data2[[\"Year\",\"Operator\"]]\n",
    "\n",
    "data3\n",
    "\n",
    "plot1 = crashes_year.plot(lw=2, figsize=(10,5))\n",
    "plot1.set_xlabel(\"Year\", fontsize=12)\n",
    "plot1.set_ylabel(\"Number of Crashes\", fontsize=12)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "no numeric data to plot",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-46-7539bdf4e1c8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplot1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcrashes_year\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplot1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Year\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplot1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Number of Crashes\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    792\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabel_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    793\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 794\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mplot_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    795\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    796\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/__init__.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(data, kind, **kwargs)\u001b[0m\n\u001b[1;32m     60\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ax\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"left_ax\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0mplot_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPLOT_CLASSES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 62\u001b[0;31m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     63\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    277\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_args_adjust\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 279\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compute_plot_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    280\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setup_subplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36m_compute_plot_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    412\u001b[0m         \u001b[0;31m# no non-numeric frames or series allowed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_empty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no numeric data to plot\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0;31m# GH25587: cast ExtensionArray of pandas (IntegerArray, etc.) to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: no numeric data to plot"
     ]
    }
   ],
   "source": [
    "plot1 = crashes_year.plot(lw=2, figsize=(10,5))\n",
    "plot1.set_xlabel(\"Year\", fontsize=12)\n",
    "plot1.set_ylabel(\"Number of Crashes\", fontsize=12)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Operator</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Aeroflot</th>\n",
       "      <td>142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Military - U.S. Air Force</th>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merpati Nusantara Airlines</th>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Military - U.S. Army</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Military - Afghan Republican Air Force</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Philippine Air Lines</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Military - Russian Air Force</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Indian Airlines</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>China Airlines (Taiwan)</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pan American World Airways</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Military - Indian Air Force</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethiopian Airlines</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burma Airways</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Balkan Bulgarian Airlines</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>United Air Lines</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Korean Airlines</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Garuda Indonesia Airlines</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Airlines</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Turkish Airlines (THY)</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        Date\n",
       "Operator                                    \n",
       "Aeroflot                                 142\n",
       "Military - U.S. Air Force                 54\n",
       "Private                                   21\n",
       "Merpati Nusantara Airlines                18\n",
       "Military - U.S. Army                      15\n",
       "Military - Afghan Republican Air Force    15\n",
       "Philippine Air Lines                      14\n",
       "Military - Russian Air Force              13\n",
       "Indian Airlines                           13\n",
       "China Airlines (Taiwan)                   12\n",
       "Pan American World Airways                12\n",
       "Military - Indian Air Force               11\n",
       "Ethiopian Airlines                        11\n",
       "Burma Airways                             11\n",
       "Balkan Bulgarian Airlines                 10\n",
       "United Air Lines                          10\n",
       "Korean Airlines                           10\n",
       "Garuda Indonesia Airlines                 10\n",
       "American Airlines                         10\n",
       "Turkish Airlines (THY)                     9"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "crashed_operator = data1.loc[:, [\"Operator\",\"Date\"]].groupby(['Operator']).count()\n",
    "crashed_operator = crashed_operator.sort_values(by=\"Date\", ascending=False).head(20)\n",
    "\n",
    "crashed_operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Number of Crashes')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fc20f368240>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot2 = crashed_operator.plot.bar(fontsize = 16, figsize=(10,5))\n",
    "plot2.set_xlabel(\"Operator\", fontsize=12)\n",
    "plot2.set_ylabel(\"Number of Crashes\", fontsize=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year         int64\n",
       "Operator    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data3.dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Operator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1970</td>\n",
       "      <td>Spantax</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1970</td>\n",
       "      <td>Military - Royal Hellenic Air Force</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1970</td>\n",
       "      <td>Polynesian Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1970</td>\n",
       "      <td>Faucett</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1970</td>\n",
       "      <td>Royal Nepal Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2527</th>\n",
       "      <td>2019</td>\n",
       "      <td>Archipelagos Service Aereos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2528</th>\n",
       "      <td>2019</td>\n",
       "      <td>TVPX Aircraft Solutions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2529</th>\n",
       "      <td>2019</td>\n",
       "      <td>Aeroflot Russian International Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2530</th>\n",
       "      <td>2019</td>\n",
       "      <td>Military - Indian Air Force</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2531</th>\n",
       "      <td>2019</td>\n",
       "      <td>Military - Pakistan Army</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2532 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Year                                 Operator\n",
       "0     1970                                  Spantax\n",
       "1     1970      Military - Royal Hellenic Air Force\n",
       "2     1970                      Polynesian Airlines\n",
       "3     1970                                  Faucett\n",
       "4     1970                     Royal Nepal Airlines\n",
       "...    ...                                      ...\n",
       "2527  2019              Archipelagos Service Aereos\n",
       "2528  2019                  TVPX Aircraft Solutions\n",
       "2529  2019  Aeroflot Russian International Airlines\n",
       "2530  2019              Military - Indian Air Force\n",
       "2531  2019                 Military - Pakistan Army\n",
       "\n",
       "[2532 rows x 2 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
